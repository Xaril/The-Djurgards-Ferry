<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init GPS and start location tracking.
if (! device_has_gps())
{
    gps_is_supported = false;
    show_message_async("(ERROR!) This device does not have GPS.");
}
else
{
    gps_is_supported = true;
    location_init();
    if (!location_is_enabled())
    {
        show_message_async("Location is not enabled!");
        location_open_settings();
    }
    else
        location_update_start();
}

latest_location_timestamp = -1;
prev_lat = -1;
prev_long = -1;

global.vikby_lat = 59.3778320;//40m radie
global.vikby_long = 18.1497400;
global.vikby_dist1 = 80;
global.vikby_dist2 = 40;
global.djurgard_lat = 59.3213426;//500m radie
global.djurgard_long = 18.0853241;
global.djurgard_dist1 = 500;
global.djurgard_dist2 = 300;
global.kth_lat = 59.3483301;//3000m radie
global.kth_long = 18.0725353;
global.kth_dist1 = 3000;
global.kth_dist2 = 2500;
global.lati = global.vikby_lat;
global.longi = global.vikby_long;
global.dist1 = global.vikby_dist1;
global.dist2 = global.vikby_dist2;

randomize();
//global.background_speed = -0.1;
global.background_speed = -1;
global.water_speed = 3*global.background_speed;
global.finished = false;

global.play_available = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume location tracking if not currently updating.
if (location_is_updating())
    location_update_start();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop if location is not supported at all.
if (! gps_is_supported)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop updating the location when the app is paused.
if (os_is_paused()) and (alarm[0] &lt;= 0)
{
    //Stop location tracking if currently updating
    if (location_is_updating())
    {
        show_debug_message("(stopping location updating)");
        location_update_stop();
        alarm[0] = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start updating the location if it gets possible (for example, when the user enables GPS).
if (! location_is_updating()) and (location_is_enabled()) and (alarm[0] &lt;= 0)
{
    location_update_start();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Maintains location check and fixes values for that.
if(location_is_available())
{
    var lat = location_get_latitude(), long = location_get_longitude();
    if(location_get_age() &lt; 5000)
    {
        var dist = abs(point_distance_earth(lat, long, global.lati, global.longi));
        if(room == room_menu)
        {
            if( dist &lt; global.dist1)
            {
                global.play_available = true;
            }
            else
            {
                global.play_available = false;
            }
        }
        if(room == room_standby)
        {
            if(dist &lt;= global.dist2)
            {
                room_goto(room_play);
            }
        }
        if(room == room_play)
        {
            if(dist &gt; global.dist2 + 5)
            {
                room_goto(room_menu);
            }
            
            if(location_has_speed())
            {
                meters = -(location_get_speed() / 12);
                global.background_speed = meters;
                global.water_speed = 3*global.background_speed;
            }
            else
            {
                if(prev_lat != -1 &amp;&amp; prev_long != -1)
                {
                    meters = abs(point_distance_earth(prev_lat, prev_long, lat, long))/2;
                    global.background_speed = -(meters / 12);
                    global.water_speed = 3*global.background_speed;
                }
            }
        }
        prev_lat = lat;
        prev_long = long;
        var location_time = location_get_time();
        if (location_time != latest_location_timestamp)
        {
            latest_location_timestamp = location_time;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop location tracking.
if (gps_is_supported) and (location_is_updating())
    location_update_stop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var lat = location_get_latitude(), long = location_get_longitude();
draw_text(32, 32, "Lat: " + string(lat));
draw_text(32, 64, "Long: " + string(long));
var dist = abs(point_distance_earth(lat, long, global.lati, global.longi));
draw_text(32, 96, "Distance: " + string(dist));
draw_text(32, 128, "Playable: " + string(global.play_available));
draw_text(32, 160, "Speed: " + string(global.water_speed));
draw_text(192, 32, "Prev lat: " + string(prev_lat));
draw_text(192, 64, "Prev long: " + string(prev_long));
if(location_has_speed())
{
    var m = location_get_speed();
}
else
{
    var m = abs(point_distance_earth(prev_lat, prev_long, lat, long))/2;
}
draw_text(192, 96, "m/s: " + string(m));
draw_text(192, 128, "Game Zone Lat: " + string(global.lati));
draw_text(192, 160, "Game Zone Long: " + string(global.longi));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
